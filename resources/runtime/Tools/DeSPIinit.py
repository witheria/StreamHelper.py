# -*- coding: utf-8 -*-

# Package Installer created by Toni Schmidbauer (Discord Witheria #4806)
# All problems, bugs or requests to schmidbauer.biz@gmail.com
#
# Please have mercy with my coding, I'm doing python for only like half a year now.
#
# Original program created by Toni Schmidbauer (c) 2020
# The code is available on GitHub, exactly on the same profile where you found the StreamHelper
# There's just a German version of the instructions and warnings, though
#
# Created with: PyQt5, PyCharm
#
# WARNING: Do not edit this file unless you know what you are doing.
import json
import os.path
import shutil
import subprocess
import sys
import webbrowser
import winreg
from pathlib import Path

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QSize
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QFileDialog, QGraphicsOpacityEffect, QMessageBox, QMainWindow

from resources.runtime import savestate
from resources.runtime.functions import confirmation, information



main_path = savestate.standardFilePath
powerPathing = {"packagePath": main_path[0], "userPath": "", "jsonfile": "", "name": "", "jsonpath": ""}
used = False
jsonPathNames = ["file", "local_file", "path"]

# check if there is a config file to get the data from
my_file = Path(main_path[0] + "/PackageInstaller.config")
if my_file.is_file():
    try:
        r = open(my_file, "r")
        jsonobject = json.load(r)
        r.close()
        powerPathing = jsonobject
        used = True
    except json.decoder.JSONDecodeError:
        print("config file not readable")


Icon = ":/images/common/icon2.png"
Background = ":/images/common/icon2.png"


class Ui_MainWindow(object):
    def __init__(self, MainWindow):
        super().__init__()

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(360, 140)

        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())

        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(360, 140))
        MainWindow.setMaximumSize(QtCore.QSize(360, 140))

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.lbl = QtWidgets.QPushButton(self.centralwidget)
        self.lbl.setGeometry(QtCore.QRect(290, 10, 64, 64))
        self.px = QIcon(Background)
        self.lbl.setIcon(self.px)
        self.lbl.setIconSize(QSize(64, 64))
        self.lbl.setToolTip("Standalone Package Installer (click, opens browser)")
        # creating a opacity effect
        self.opacity_effect = QGraphicsOpacityEffect()

        # setting opacity level
        self.opacity_effect.setOpacity(0.3)

        # adding opacity effect to the label
        self.lbl.setGraphicsEffect(self.opacity_effect)

        self.install = QtWidgets.QPushButton(self.centralwidget)
        self.install.setGeometry(QtCore.QRect(8, 80, 111, 23))
        self.install.setObjectName("pushButton")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 10, 351, 16))

        font = QtGui.QFont()
        font.setPointSize(10)

        self.label.setFont(font)
        self.label.setObjectName("label")

        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(117, 40, 131, 16))
        self.label_2.setObjectName("label_2")

        self.finish = QtWidgets.QLabel(self.centralwidget)
        self.finish.setGeometry(QtCore.QRect(40, 60, 47, 14))
        self.finish.setObjectName("finish")

        self.delete = QtWidgets.QPushButton(self.centralwidget)
        self.delete.setGeometry(QtCore.QRect(122, 80, 111, 23))
        self.delete.setObjectName("pushButton_2")

        self.close = QtWidgets.QPushButton(self.centralwidget)
        self.close.setGeometry(QtCore.QRect(237, 80, 111, 23))
        self.close.setObjectName("pushButton_3")

        MainWindow.setCentralWidget(self.centralwidget)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.close.clicked.connect(lambda: sys.exit(0))

        self.install.clicked.connect(lambda: self.installPaths())

        self.delete.clicked.connect(lambda: delPackage())

        self.lbl.clicked.connect(lambda: webbrowser.open("https://github.com/witheria/DESPI"))

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Package Installer"))
        self.install.setText(_translate("MainWindow", "Install package"))
        self.label.setText(_translate("MainWindow", "Welcome to the Package Installer"))
        self.label_2.setText(_translate("MainWindow", "What do you want to do?"))
        self.delete.setText(_translate("MainWindow", "Delete package"))
        self.close.setText(_translate("MainWindow", "Cancel"))
        self.finish.setText(_translate("MainWindow", ""))

    def installPaths(self):
        _translate = QtCore.QCoreApplication.translate
        information("Please input the target directory.")
        path = QFileDialog.getExistingDirectory(self.centralwidget, "Input target directory",
                                                powerPathing["packagePath"])
        powerPathing["userPath"] = path

        information("Please input the JSON-File. Make sure your whole package lies in the same directory")

        file = QFileDialog.getOpenFileName(self.centralwidget, "Input JSON directory", powerPathing["packagePath"])

        powerPathing["jsonfile"] = file[0]
        powerPathing["jsonpath"] = os.path.split(powerPathing["jsonfile"])[0]
        print(powerPathing["jsonfile"], powerPathing["jsonpath"])

        subdirlist = powerPathing["jsonpath"].split("/")[-1]
        print("This is the directory list: ", subdirlist)

        try:
            getFilePathsfromJSON(subdirlist)
            getOBSPath(0)
        except FileNotFoundError:
            pass
        try:
            file = open(".config", "r+")
        except FileNotFoundError or PermissionError:
            print("there is not config file yet, creating one...")
            file = open(".config", "w")
        file.truncate(0)
        json.dump(powerPathing, file, sort_keys=True, indent=4)
        file.close()
        os.system("attrib +h " + str(Path(powerPathing["packagePath"] + "/.config")))


def getFilePathsfromJSON(subdirlist):
    subjsonobject = None
    try:
        subfile = open(powerPathing["jsonfile"], "r", encoding="utf-8")
        subjsonobject = json.load(subfile)
        subfile.close()
    except FileNotFoundError:
        print("File not Found!")
        return
    except json.JSONDecodeError:
        information("Please make sure to input a \".json\" file with the right format!")

    powerPathing["name"] = subjsonobject["name"]
    print("Name seems to be: ", subjsonobject["name"])

    copyPackage()

    for i in subjsonobject['sources']:
        for key in jsonPathNames:
            # print("Checking for key: ", key)
            if key in i["settings"]:
                save = i['settings'][key]
                print("Found key: ", save)
                if subdirlist in save:
                    newName = powerPathing["userPath"] + "/" + powerPathing["name"] + save.split(subdirlist)[1]
                    print("This is the new path: ", newName)
                    i['settings'][key] = newName
                else:
                    print("The path seems to not be part of the package!")
            if "playlist" in i["settings"] and i["id"] == "vlc_source":
                for setting in range(0, len(i["settings"]["playlist"])):
                    save = i["settings"]["playlist"][setting]
                    print("Found playlist: ", save["value"])
                    if subdirlist in save["value"]:
                        newName = powerPathing["userPath"] + "/" + \
                                  powerPathing["name"] + save["value"].split(subdirlist)[1]
                        print("This is the new path for the playlist: ", newName)
                        i["settings"]["playlist"][setting]["value"] = newName
            else:
                print("The path seems to not be part of the package!")
    for i in subjsonobject["transitions"]:
        if subdirlist in i["settings"]["path"]:
            print("Found transition: ", i)
            newName = powerPathing["userPath"] + "/" + powerPathing["name"] + i["settings"]["path"].split(subdirlist)[1]
            i["settings"]["path"] = newName
            print("New transition path is: ", newName)
        else:
            print("The path seems to not be part of the package!")

    packageFile = str(
        powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1])
    print("This will be the new package file: " + packageFile)
    subfile = open(packageFile, "w")
    json.dump(subjsonobject, subfile, sort_keys=True, indent=4)
    subfile.close()


def copyPackage():
    print(powerPathing)
    try:
        shutil.copytree((powerPathing["jsonpath"]),
                        powerPathing["userPath"] + "\\" + powerPathing["name"])
        print("Successfully copied files to ", powerPathing["userPath"] + "\\" + powerPathing["name"])
    except FileNotFoundError:
        print("copyPackage: File not found!")
    except NotADirectoryError:
        print(powerPathing, "There was no directory found!")
    except FileExistsError:
        print("There is already a directory at that position!")


def delPackage():
    """
    Deletes the last package installed ( the one saved in the .config file )
    :return: None
    """
    if used:
        dialog = QMessageBox()
        dialog.setIcon(QMessageBox.Information)
        dialog.setText("Everything in the last used directory will be deleted, including user-added files! Sure?")
        dialog.setWindowTitle("Warning")
        dialog.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)

        yes = dialog.exec_()
        if yes == QMessageBox.Ok:
            try:
                shutil.rmtree(powerPathing["userPath"] + "\\" + powerPathing["name"])
                getOBSPath(1)
            except FileNotFoundError:
                print("Package not found!")
            except PermissionError:
                print("Path could not be deleted!")
    else:
        print("No package installed yet!")


def getOBSPath(arg):
    """
    Way too much work went into this
    This method first gets the obs path from the registry, copies the scene collection to its appdata folder,
    then opens it with launch parameters. Note that obs needs to be closed by the user beforehand
    The "arg" is used to delete the collection from the folder
    :return: None
    """
    if powerPathing["userPath"] == "":
        return None
    # this is the path to the obs scenes directory:
    print(os.path.split(powerPathing["jsonfile"])[1])
    if arg == 0:
        dest = str(os.getenv('APPDATA') + "\\obs-studio\\basic\\scenes\\" + powerPathing["name"] + ".json")
        src = powerPathing["userPath"] + "\\" + powerPathing["name"] + "\\" + os.path.split(powerPathing["jsonfile"])[1]
        shutil.copyfile(src, dest)
        registry = winreg.ConnectRegistry(None, winreg.HKEY_LOCAL_MACHINE)
        obskey = winreg.OpenKey(registry, r"SOFTWARE\OBS Studio")
        obs_dir, type_ = winreg.QueryValueEx(obskey, None)
        if type_ == winreg.REG_EXPAND_SZ:
            obs_dir = os.path.expandvars(obs_dir)
        elif type_ != winreg.REG_SZ:
            return None
        print("This is the obs path: ", obs_dir)
        obsremainder = r"\bin\64bit\obs64.exe"
        obsfullpath = obs_dir + obsremainder
        subprocess.Popen([obsfullpath, "--collection", powerPathing["name"]], cwd=os.path.split(obsfullpath)[0])
    if arg == 1:
        try:
            dest = str(os.getenv('APPDATA') + "\\obs-studio\\basic\\scenes\\" + powerPathing["name"] + ".json")
            os.remove(dest)
            print("Removed package from OBS Scenes!")
        except FileNotFoundError:
            print("The package could not be found in the OBS folder!")


stylesheet = """
    QMainWindow {
        background-image: url("bg2.png");
        background-repeat: no-repeat; 
        background-position: left;
    }
"""


def showInstaller(parent):

    ok = confirmation("This tool only works on Windows! \n"
                      "Please close OBS Studio for it to work properly!")
    if ok:
        win = QMainWindow(parent)
        win.setWindowIcon(QIcon(":/images/common/icon2.png"))
        Ui_MainWindow(win)
        win.show()
        # sys.exit(app.exec_())
